import org.joda.time.DateTime

import java.time.DayOfWeek
import java.time.LocalDate

group 'gradle-borisov'
version '1.0-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = 1.8

buildscript {
    repositories{
        jcenter()
    }

    dependencies {
        classpath 'joda-time:joda-time:2.4'
    }
}


repositories {
    jcenter()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.3.11'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
}

task printTime {
    println 'I am configuring'
    doFirst {
        println new Date()
    }
}

task printJodaTime {
    println 'I am configuring'
    doLast {
        println "Time ${new DateTime()}"
    }
}

task printNameFromProperties {
    doFirst {
        println "Hello $personName"
    }

    doLast {
        println "Bye $personName"
    }
}

task conditionalTask {
    onlyIf {
        DayOfWeek.MONDAY == LocalDate.now().getDayOfWeek()
    }

    doLast {
        println 'conditionalTask is working'
    }
}

/*

Override alien task
compileJava.onlyIf {

}*/

task sendMail(type:mail.MailTask) {
    to = 'Blablabla@gm.com'
}

task a << {
    println 'a'
}

task b << {
    println 'b'
}

task c << {
    println 'c'
}

task d << {
    println 'd'
}

a.dependsOn b, c
c.dependsOn d

test.testLogging.showStandardStreams = true
//test.testLogging.exceptionFormat "full"

build.dependsOn.remove(check)
build.dependsOn a


task runIntegrationTast(type:JavaExec) {
    main = 'com.test.HelloMessage'
    classpath sourceSets.test.runtimeClasspath
}


gradle.addBuildListener(new BuildAdapter() {
    @Override
    void buildFinished(BuildResult result) {
        if(result.failure) {
            getProject().sendMail.execute()
        }
    }
})